# -*- coding: utf-8 -*-
"""RisetNPK

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17SOPWnMjtewZ4b4PSr4P5QzEe4GV6hrD
"""


import pandas as pd
import pickle
#import joblib
#from joblib import load
import numpy as np
#import tensorflow
#import pickle
#from tensorflow import keras
import warnings
warnings.filterwarnings('ignore')

import firebase_admin
from firebase_admin import credentials
from firebase_admin import db

# Inisialisasi koneksi Firebase
cred = credentials.Certificate("pkey.json")
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://sisoil-9cb24-default-rtdb.asia-southeast1.firebasedatabase.app/'
})

"""#MULAI"""

# Dapatkan referensi ke database Firebase
ref = db.reference('/Alat_Ukur3')

def create_databaru(dataset, lookback):
    dataX = []
    for i in range(len(dataset) - lookback -1):
        a = dataset[i: (i+lookback), 0]
        dataX.append(a)
    return np.array(dataX)

dmc = [0]
dmc = np.array(dmc)
dphc = [0]
dphc = np.array(dphc)

"""#GET DATA"""

import time
from datetime import datetime

def parse_datetime(date_string):
    return datetime.strptime(date_string, "%Y-%m-%d %H:%M:%S")

def get_data():
    global dm, dmc, dph, dphc, dbmois, xy, dpha, comparison, dmcf, dmf, waktu, dhn, dhp, dhk, dbN,N,P,K
    results = ref.order_by_key().limit_to_last(1).get()
    ph_values = []
    moisture_values = []
    date_time = []
    N = []
    P = []
    K = []

    for key, value in results.items():
        ph_values.append(value['ph'])
        moisture_values.append(value['moisture'])
        date_time.append(value['waktu'])
        N.append(value['n'])
        P.append(value['p'])
        K.append(value['k'])

    comparison = dmcf != dmf

    N = int(N[0])
    P = int(P[0])
    K = int(K[0])
    #waktu = str(waktu[0])
    waktu = date_time
    waktu = [parse_datetime(date_string).date() for date_string in date_time]
    waktu = [date.strftime("%Y-%m-%d") for date in waktu]

    print(waktu)

import time
from datetime import datetime

def parse_datetime(date_string):
    return datetime.strptime(date_string, "%Y-%m-%d %H:%M:%S")

def get_data():
    global dm, dmc, dph, dphc, dbmois, xy, dpha, comparison, dmcf, dmf, waktu, dhn, dhp, dhk, dbN, N, P, K, ph, moisture
    results = ref.order_by_key().limit_to_last(1).get()
    ph_values = []
    moisture_values = []
    date_time = []
    N = []
    P = []
    K = []

    for key, value in results.items():
        ph_values.append(value['ph'])
        moisture_values.append(value['moisture'])
        date_time.append(value['waktu'])
        N.append(value['n'])
        P.append(value['p'])
        K.append(value['k'])


    dm = [N for moisture in N]
    dm = np.array(dm)
    dpha = [P for ph in P]
    dpha = np.array(dpha)
    dmcf = dmc[:2]
    dmf = dm[:2]

    comparison = dmcf != dmf
    ph = float(ph_values[0])
    moisture = int(moisture_values[0])
    N = int(N[0])
    P = int(P[0])
    K = int(K[0])
    waktu = date_time
    waktu = [parse_datetime(date_string).date() for date_string in date_time]
    waktu = [date.strftime("%Y-%m-%d") for date in waktu]

    #print(waktu)

get_data()

"""## Kurang NPK"""

def cari_gram():
    global N,K,P
    get_data()
    print(N)
    print(P)
    print(K)

    KN = N;
    if KN >= 210:
        KN = 0
    else:
        KN = 210 - KN
        KN=KN

    # Normalisasi untuk prediksi jumlah pupuk P
    KP = P;
    if KP > 14:
        KP = 0
    else:
        KP = 14 - KP

    # Normalisasi untuk prediksi jumlah pupuk K
    KK = K-30
    if KK > 150:
        KK = 0
    else:
        KK = 150 - KK

    #print(KN)
    #print(KP)
    #print(KK)

import numpy as np

def cari_ideal():
    global minN, minP, minK, minM, minph, prediksiDP, hasilPrediksi, pred_N, pred_P, pred_K, urea, SP36, KCL, minNPK
    global N, P, K, ph, moisture  # Make sure N, P, and K are declared as global variables
    get_data()

    KN = N
    if KN >= 210:
        KN = 0
    else:
        KN = 210 - KN
        KN = KN

    # Normalisasi untuk prediksi jumlah pupuk P
    KP = P
    if KP > 14:
        KP = 0
    else:
        KP = 14 - KP

    # Normalisasi untuk prediksi jumlah pupuk K
    KK = K - 10
    if KK > 150:
        KK = 0
    else:
        KK = 150 - KK

    #print(KN)
    #print(KP)
    #print(KK)

    #KEBUTUHAN PUPUK 1 ppm/m2
    kpN = 0
    kpP = 0
    kpK = 0
    lh = 0
    def kepukn(kpN,lh):
      pmN = (kpN*lh)
      return pmN

    def kepukp(kpP,lh):
      pmP = (kpP*lh)
      return pmP

    def kepukk(kpK,lh):
      pmK = (kpK*lh)
      return pmK

    #isi manual sesuai kondisi
    lahanN = kepukn(0.652,1)
    lahanP = kepukp(1.91,1)
    lahanK = kepukk(0.5,1)

    #ppm ke gram
    def dengan_luaslahanN(lahanN,ppm): #ppm sama dengan luas lahan
      ppm_luaslahanN = ppm*(lahanN)
      return ppm_luaslahanN

    def dengan_luaslahanP(lahanP,ppm):
      ppm_luaslahanP = ppm*(lahanP)
      return ppm_luaslahanP

    def dengan_luaslahanK(lahanK,ppm):
      ppm_luaslahanK = ppm*(lahanK)
      return ppm_luaslahanK

    minNPK = [[KN,KP,KK,ph,moisture]]
    if minNPK == [[0, 0, 0, 0, 0]]:
          prediksiDP = 0
        #print("oke")
    else:
      prediksiDP = 1
        #print("hayooo")
     #print(minNPK)


    #BACA PPM
    urea = round(dengan_luaslahanN(lahanN,KN),5)
    SP36 = round(dengan_luaslahanP(lahanP,KP),5)
    KCL = round(dengan_luaslahanK(lahanK,KK),5)
    #print(KN)
    #print(KP)
    #print(KK)
    print(urea)
    print(SP36)
    print(KCL)

#get_data()
#prediksi_PM()
#dp = prediksi_npk(dp, model_k, model_n, model_p)
#hasil = olah_hasil(dp)
#cari_ideal()
#print(prediksiDP)

"""# CARI NILAI 1"""

from datetime import datetime, timedelta

j = 0
xz = 0

def cari_nilai1():
    global j, dp, comparison, xz, waktu, waktu_int
    while True:
        j = j + 1
        get_data()
        cari_ideal()
        # Contoh penggunaan perintah "break" untuk keluar dari perulangan
        if prediksiDP == 1:
            break
    xz = xz + 1

    # Assuming waktu is a list containing datetime strings
    date_string = waktu[0]
    waktu1 = datetime.strptime(date_string, "%Y-%m-%d")

    # Add 15 days to the original date
    waktu1 = waktu1 + timedelta(days=15)

    # Convert the new date back to a string
    waktu_str = waktu1.strftime("%Y-%m-%d")

    # print("Pada waktu ", waktu_str, " tanaman akan membutuhkan pupuk sebanyak ", hasilPrediksi, "gram")
    print("prediksi ke-", xz)
    dtf = str(waktu_str)
    stf = ("Pada", dtf, "Tanaman membutuhkan pupuk urea", urea, "gram, pupuk SP36", SP36, "gram, dan pupuk KCL", KCL,
           "gram")
    stf = str(stf)
    ref = db.reference('/prediksiAlat3(CLMD)')
    data = {
        'Penambahan pupuk KCL': KCL,
        'Penambahan pupuk Urea': urea,
        'Penambahan pupuk SP36': SP36,
        'waktu prediksi': waktu_str,
        'waktu pembacaan' : waktu,
        'hasil': stf
    }
    #print(waktu_str)
    # Mengirim data ke database
    ref.set(data)

cari_nilai1()

"""#HASIL"""

import time

temp = 0
while True:
    i = 0
    j = 0
    get_data()
    # Uncomment the following lines if you need to calculate the comparison
    # changeCount()
    comparison = dmcf != dmf
    # print(comparison)

    if comparison:  # Directly use the boolean condition in the if statement
        cari_nilai1()
        # cari_nilai2()
    else:
        a = 0
    time.sleep(2)