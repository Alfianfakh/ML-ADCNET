# -*- coding: utf-8 -*-
"""final1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_W5hBq5pdb70HB6GW4Fmvuw-DYpqPYNX
"""

from google.colab import drive
drive.mount("/content/drive")

import pandas as pd
import pickle
import joblib
from joblib import load
import numpy as np
import warnings
warnings.filterwarnings('ignore')

import firebase_admin
from firebase_admin import credentials
from firebase_admin import db

# Inisialisasi koneksi Firebase
cred = credentials.Certificate("../content/drive/My Drive/Machine Learning/PEMODELAN/pkey.json")
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://sisoil-9cb24-default-rtdb.asia-southeast1.firebasedatabase.app/'
})

"""#MULAI"""

# Dapatkan referensi ke database Firebase
ref = db.reference('/Alat_Ukur3')

with open('../content/drive/My Drive/Machine Learning/PEMODELAN/rf_k.pkl', 'rb') as file:
    model_k = pickle.load(file)

with open('../content/drive/My Drive/Machine Learning/PEMODELAN/rf_n.pkl', 'rb') as file:
    model_n = pickle.load(file)

with open('../content/drive/My Drive/Machine Learning/PEMODELAN/rf_p.pkl', 'rb') as file:
    model_p = pickle.load(file)

model_ph = joblib.load('../content/drive/My Drive/Machine Learning/PEMODELAN/ANN_ph.pkl')
model_mois = joblib.load('../content/drive/My Drive/Machine Learning/PEMODELAN/ANN_mois.pkl')
GBR = load('../content/drive/My Drive/Machine Learning/PEMODELAN/RF_JP.pkl')

def create_databaru(dataset, lookback):
    dataX = []
    for i in range(len(dataset) - lookback -1):
        a = dataset[i: (i+lookback), 0]
        dataX.append(a)
    return np.array(dataX)

dmc = [0. ,0. ,0.,0.]
dmc = np.array(dmc)
dphc = [0. ,0. ,0.,0.]

dphc = np.array(dphc)

def get_data():
    global dm,dmc,dph,dphc,dbmois,xy,dpha,comparison,dmcf,dmf,waktu
    results = ref.order_by_key().limit_to_last(4).get()
    ph_values = []
    moisture_values = []
    date_time = []
    for key, value in results.items():
        ph_values.append(value['ph'])
        moisture_values.append(value['moisture'])
        date_time.append(value['waktu'])
    waktu = np.array(date_time[-1:])
    dm = [float(moisture) for moisture in moisture_values]
    dm = np.array(dm)
    dpha = [float(ph) for ph in ph_values]
    dpha = np.array(dpha)
    dmcf = dmc[:2]
    dmf = dm[:2]
    #print("dm",dm)
    #print("dmcf",dmcf)
    comparison = dmcf != dmf
    if all(comparison):
        dbmois = dm.reshape(-1, 1)
        dbmois = create_databaru(dbmois,2)
        dph = dpha.reshape(-1, 1)
        dph = create_databaru(dph,2)
        #print("awal")
    else:
        dbmois = np.array(dmc[-4:])
        dbmois = dbmois.reshape(-1, 1)
        pjg = dbmois.shape[0]
        x = int(pjg/2)
        dbmois = dbmois.reshape(x,2)
        #print("dbmois",dbmois)
        dph = np.array(dphc[-4:])
        dph = dph.reshape(-1, 1)
        pjg = dph.shape[0]
        x = int(pjg/2)
        dph = dph.reshape(x,2)
        #print("dph",dph)
        #print("next")

def prediksi_PM():
    global dp,dph,dbmois
    predictph=model_ph(dph)
    predictph = np.array(predictph)
    predictph = predictph.flatten()
    predictmois=model_mois(dbmois)
    predictmois = np.array(predictmois)
    predictmois = predictmois.flatten()
    dp=[predictmois,predictph]
    dp = np.array(dp)
    pjg = dbmois.shape[0]
    dp = dp.T
    dp = dp.reshape(pjg, 2)
    dp = pd.DataFrame(dp, columns=['moisture', 'ph'])
    #print(dp)

def prediksi_npk(dp, model_k, model_n, model_p):
    global dmc,dphc,dm,dpha,i
    k_pred = model_k.predict(dp)
    dp['k'] = k_pred
    new_order = ['k', 'moisture', 'ph']
    dp = dp.reindex(columns=new_order)

    n_pred = model_n.predict(dp)
    dp['n'] = n_pred
    new_order = ['k', 'moisture', 'n', 'ph']
    dp = dp.reindex(columns=new_order)

    p_pred = model_p.predict(dp)
    dp['p'] = p_pred
    new_order = ['k', 'n', 'p', 'moisture', 'ph']
    dp = dp.reindex(columns=new_order)

    # Mengambil nilai kolom menjadi array
    sm = dp['moisture'].values
    sp = dp['ph'].values
    if i == 0:
        dmc = np.concatenate((dm, sm))
        dphc = np.concatenate((dpha, sp))
    else:
        dmc = np.concatenate((dmc, sm))
        dphc = np.concatenate((dphc, sp))
    i = i+1
    return dp

def olah_hasil(dp):
    dp = dp.tail(1)
    mois = dp['moisture'].to_numpy()
    ph = dp['ph'].to_numpy()
    k = dp['k'].to_numpy()
    n = dp['n'].to_numpy()
    p = dp['p'].to_numpy()
    hasil = np.concatenate((mois, ph))
    hasil = np.concatenate((p, hasil))
    hasil = np.concatenate((n, hasil))
    hasil = np.concatenate((k, hasil))
    hasil = np.array(hasil)

    return hasil
#hasil = olah_hasil(dp)
#print(hasil)

"""#Cari IDEAL"""

import numpy as np
def cari_ideal(hasil):
    global minN,minP,minK,minM,minph,prediksiDP,hasilPrediksi
    # Normalisasi untuk prediksi jumlah pupuk N
    minN = hasil[0]
    if minN >= 210:
        minN = 0
    else:
        minN = 210 - minN

    # Normalisasi untuk prediksi jumlah pupuk P
    minP = hasil[1]-65;
    if minP > 16:
        minP = 0
    else:
        minP = 30 - minP

    # Normalisasi untuk prediksi jumlah pupuk K
    minK = hasil[2]
    if minK > 145:
        minK = 0
    else:
        minK = 145 - minK

    # Normalisasi untuk prediksi jumlah pupuk MOIS
    minM = hasil[3]
    if minM > 65:
        minM = 0
    else:
        minM = 65 - minM

    # Normalisasi untuk prediksi jumlah pupuk pH
    minph = hasil[4]
    if minph > 5.9:
        minph = 0
    else:
        minph = 5.9 - minph

    # Mengubah menjadi array 2D
    minN = np.squeeze(minN)
    minP = np.squeeze(minP)
    minK = np.squeeze(minK)
    minM = np.squeeze(minM)
    minph = np.squeeze(minph)
    minNPK=[[minN, minP, minK, minM, minph]]
    # prediksi JP, dari NPK kurang
    if minNPK == [[0, 0, 0, 0, 0]]:
        prediksiDP = 0
        #print("oke")
    else:
        prediksiDP = 1
        #print("hayooo")
        print(minNPK)
        hasilPrediksi = GBR.predict(minNPK)
        hasilPrediksi = float(hasilPrediksi[0])

#get_data()
#prediksi_PM()
#dp = prediksi_npk(dp, model_k, model_n, model_p)
#hasil = olah_hasil(dp)
#cari_ideal(hasil)
#print(prediksiDP)

import datetime
def cari_nilai():
    global j,dp,comparison,xz,waktu
    while True:
        j = j+1
        get_data()
        prediksi_PM()
        dp = prediksi_npk(dp, model_k, model_n, model_p)
        hasil = olah_hasil(dp)
        cari_ideal(hasil)
        # Contoh penggunaan perintah "break" untuk keluar dari perulangan
        if prediksiDP == 1:
            break
    xz = xz+1
    waktu = str(waktu[0])
    #xyz = (j * 3600)
   #waktu = int(waktu + xyz)
    # Konversi timestamp Unix ke objek datetime
    #dt = datetime.datetime.fromtimestamp(waktu)
    #print("Pada waktu ",waktu," tanaman akan membutuhkan pupuk sebanyak ",hasilPrediksi,"gram")
   # print("prediksi ke-",xz)
    dtf = str(waktu)
    htf = ("Pada waktu ",waktu," tanaman akan membutuhkan pupuk sebanyak ",hasilPrediksi,"gram")
    htf = str(htf)
    ref = db.reference('/prediksi')
    data = {
        'waktu': dtf,
        'kepuk': hasilPrediksi,
        'word': htf
    }

    # Mengirim data ke database
    ref.set(data)

dmc = [0. ,0. ,0.,0.]
dmc = np.array(dmc)
dphc = [0. ,0. ,0.,0.]
dphc = np.array(dphc)
xz = 0

dp

import time
while True:
    i=0
    j = 0
    get_data()
    comparison = dmcf != dmf
    #print(all(comparison))
    if all(comparison):
        cari_nilai();
    else:
        a=0
    time.sleep(2)

